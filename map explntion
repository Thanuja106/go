A map is like an apartment complex with many rooms. Every room has a key and key is necessary to find out whatâ€™s inside that room. Key can be made of any fixed material (data type) and a room can contain any fixed material (data type).
 What is a map?
A map is like an array except, instead of an integer index, you can have string or any other data types as key
example:
package main

import "fmt"

func main() {
  var m map[string]int
  fmt.Println(m)
}
output:map[]
/----------------------------------------------------------------------------
package main

import "fmt"

func main() {
  var m map[string]int
  fmt.Println(m)
   m["name"]=20
   fmt.Println(m)
}
output:
panic: assignment to entry in nil map

goroutine 1 [running]:
main.main()
    /home/runner/main.go:8 +0xa5
exit status 2
/---------------------------------------------------------------------------
package main

import "fmt"

func main() {
  var age=make(map[string]int)
  fmt.Println(age)
  }
  output:map[]
  /----------------------------------------------------------------------------------
  package main

import "fmt"

func main() {
  var age=make(map[string]int)
  fmt.Println(age)
  age["roll no"]=13
fmt.Println(age)
output:
map[]
map[roll no:12]
/-----------------------------------------------------------------
  WE CAN ASSIGN LIKE THIS
  package main

import "fmt"

func main() {
 age:= map[string]int{//we cant write like this i,e.var age map[string]int{
                                                                            -----}
   "students":50,
   "roll no":1,
   "classes":10,
 }
 fmt.Println(age)
}
OUTPUT
map[classes:10 roll no:1 students:50]
/--------------------------------------------------------------------------------
Accessing map data:-
In case array or slice, when you are trying to access out of index element (when the index does not exist), go will throw an error.
But not in case of map. When you are trying to access the value by the key which is not present in the map, go will not throw an error, 
instead, it will return zero value of valueType
package main

import "fmt"

func main() {
 age:= map[string]int{
   "students":50,
   "roll no":1,
   "classes":10,
 }
 fmt.Println(age["students"],age["john"])
}
OUTPUT"
50 0
/------------------------------------------------------------------------------------
So, to check if a key exists in the map or not, go provide another syntax which returns 2 values.
value, ok := m[key]
example:
package main

import "fmt"

func main() {
 age:= map[string]int{
   "students":50,
   "roll no":1,
   "classes":10,
 }
minage,right:=age["students"]
fmt.Println(minage,right)
}
output:
50 true
/-----------------------------------------------------
to find length of the map
fmt.Println(len(age))
/=====================================================================================
here we wont use cap in map..
/=================================
DELETE FUNCTION
package main

import "fmt"

func main() {
 age:= map[string]int{
   "students":50,
   "roll no":1,
   "classes":10,
 }
 delete(age,"students")
 fmt.Println(age)
for i,value:=range age{
  fmt.Println(i,value)
}
}
OUTPUT:
map[classes:10 roll no:1]
roll no 1
classes 10
/===============================================================================================
package main

import "fmt"

func main() {
  var ages map[string]string

age:=map[string]string{
"ha":"jfg",
"jrjh":"jhugfhr",

}
ages=age
delete(ages,"ha")
fmt.Println(age,ages)
}
output:
map[jrjh:jhugfhr] map[jrjh:jhugfhr]




